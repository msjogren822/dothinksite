// netlify/functions/venice-dogify.js
exports.handler = async function (event) {
  try {
    if (event.httpMethod !== 'POST') {
      return { statusCode: 405, body: JSON.stringify({ ok: false, error: 'Method not allowed' }) };
    }

    if (!process.env.VENICE_API_KEY) {
      return {
        statusCode: 500,
        body: JSON.stringify({ ok: false, error: 'Venice API key not configured' })
      };
    }

    const { userImage, dogImage } = JSON.parse(event.body);
    
    if (!userImage || !dogImage) {
      return {
        statusCode: 400,
        body: JSON.stringify({ ok: false, error: 'Missing userImage or dogImage' })
      };
    }

    console.log('Venice.ai: Analyzing selfie and placing dog...');

    // Step 1: Test Venice.ai chat endpoint first with correct model names
    const visionResponse = await fetch('https://api.venice.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.VENICE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "llama-3.2-11b-vision-instruct", // Venice.ai vision model
        messages: [{
          role: "user",
          content: [
            { 
              type: "text", 
              text: "Describe this selfie in detail including the person's appearance, pose, clothing, and the background setting. Include all visual details for recreating this scene with an additional dog." 
            },
            { 
              type: "image_url", 
              image_url: { url: userImage } 
            }
          ]
        }],
        max_tokens: 300
      })
    });

    // Step 2: Analyze the dog image
    const dogVisionResponse = await fetch('https://api.venice.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.VENICE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "llama-3.2-11b-vision-instruct",
        messages: [{
          role: "user",
          content: [
            { 
              type: "text", 
              text: "Describe this dog in detail - breed, size, colors, pose, any accessories or distinctive features." 
            },
            { 
              type: "image_url", 
              image_url: { url: dogImage } 
            }
          ]
        }],
        max_tokens: 200
      })
    });

    let selfieDescription = "a person in a selfie with background setting";
    let dogDescription = "a small dog";
    
    if (visionResponse.ok) {
      const visionResult = await visionResponse.json();
      selfieDescription = visionResult.choices[0].message.content;
      console.log('Venice selfie analysis:', selfieDescription);
    } else {
      const errorText = await visionResponse.text();
      console.error('Venice vision error:', errorText);
    }
    
    if (dogVisionResponse.ok) {
      const dogResult = await dogVisionResponse.json();
      dogDescription = dogResult.choices[0].message.content;
      console.log('Venice dog analysis:', dogDescription);
    } else {
      const errorText = await dogVisionResponse.text();
      console.error('Venice dog vision error:', errorText);
    }

    // Step 3: Create a prompt that preserves the person and adds the dog
    const placementPrompt = `Recreate this exact selfie scene: ${selfieDescription}. Keep the person exactly as they appear in the original. Add this dog as a companion: ${dogDescription}. Place the dog naturally in the scene so both the person and dog are clearly visible and it looks like they're together. Maintain the original composition and lighting.`;
    
    console.log('Venice placement prompt:', placementPrompt);

    // Step 4: Generate image using Venice.ai image generation
    const imageResponse = await fetch('https://api.venice.ai/api/v1/images/generations', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.VENICE_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "flux-1.1-pro", // Venice.ai image generation model
        prompt: placementPrompt,
        n: 1,
        size: "1024x1024",
        response_format: "url"
      })
    });

    if (!imageResponse.ok) {
      const errorText = await imageResponse.text();
      console.error('Venice image generation error:', errorText);
      return {
        statusCode: 500,
        body: JSON.stringify({ 
          ok: false, 
          error: `Venice image generation failed: ${imageResponse.status}`,
          details: errorText.substring(0, 200)
        })
      };
    }

    const imageResult = await imageResponse.json();
    
    if (!imageResult.data || !imageResult.data[0]) {
      return {
        statusCode: 500,
        body: JSON.stringify({ ok: false, error: 'No image generated by Venice', debug: imageResult })
      };
    }

    return {
      statusCode: 200,
      body: JSON.stringify({
        ok: true,
        generatedImageUrl: imageResult.data[0].url,
        selfieDescription: selfieDescription,
        dogDescription: dogDescription,
        placementPrompt: placementPrompt,
        model: "venice.ai"
      })
    };

  } catch (err) {
    console.error('Venice function error:', err);
    return {
      statusCode: 500,
      body: JSON.stringify({ 
        ok: false, 
        error: err.message
      })
    };
  }
};
